# Generic utilities
inc(0, 1).
inc(1, 2).
inc(2, 3).
inc(3, 4).
inc(4, 5).
inc(5, 6).
inc(6, 7).

any(X) :- inc(X, Y)

less(X, Y) :- inc(X, Y)
less(X, Y) :- inc(X, Z), less(Z, Y)

ne(X, Y) :- ne(Y, X)
ne(X, Y) :- less(X, Y)
ne2(X1, Y1, X2, Y2) :- ne(X1, X2), any(Y1), any(Y2)
ne2(X1, Y1, X2, Y2) :- ne(Y1, Y2), any(X1), any(X2)

# Input

# player(P: 0 | 1)
# move(X: [0-2], Y: [0-2])
# board(X: [0-2], Y: [0-2], P | 2), where 2 means blank

# TTT Logic

next_player(0) :- player(1)
next_player(1) :- player(0)

next_board(X, Y, P) :-
  board(X, Y, P),
  move(X1, Y1),
  ne2(X, Y, X1, Y1)
next_board(E, X, Y, P) :-
  move(X, Y),
  board(X, Y, 2),
  player(P)


sample
  player(0),
  move(0, 0),
  board(0, 0, 2),
  board(0, 1, 2),
  board(0, 2, 2),
  board(1, 0, 2),
  board(1, 1, 2),
  board(1, 2, 2),
  board(2, 0, 2),
  board(2, 1, 2),
  board(2, 1, 2),
  board(2, 2, 2)
output
  next_board(0, 0, 0),
  next_board(0, 1, 2),
  next_board(0, 2, 2),
  next_board(1, 0, 2),
  next_board(1, 1, 2),
  next_board(1, 2, 2),
  next_board(2, 0, 2),
  next_board(2, 1, 2),
  next_board(2, 2, 2).

sample
  player(0),
  move(1, 1),
  board(0, 0, 2),
  board(0, 1, 2),
  board(0, 2, 2),
  board(1, 0, 2),
  board(1, 1, 0),
  board(1, 2, 2),
  board(2, 0, 2),
  board(2, 1, 2),
  board(2, 1, 2),
  board(2, 2, 2)
output
  next_board(0, 0, 2),
  next_board(0, 1, 2),
  next_board(0, 2, 2),
  next_board(1, 0, 2),
  next_board(1, 1, 0),
  next_board(1, 2, 2),
  next_board(2, 0, 2),
  next_board(2, 1, 2),
  next_board(2, 2, 2).
