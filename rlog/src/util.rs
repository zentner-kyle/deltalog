use std::ops::AddAssign;

/// Push new elements generated by repeatedly by calling f onto the end of v.
#[allow(dead_code)]
pub fn extend_vec_with<T, F>(v: &mut Vec<T>, needed_index: usize, mut f: F)
    where F: FnMut() -> T
{
    if needed_index >= v.len() {
        let difference = 1 + needed_index - v.len();
        v.extend((0..difference).map(|_| f()));
    }
}

#[allow(dead_code)]
pub fn cumulative_sum<'a, 'b, T>(array: &'a mut [T])
    where T: AddAssign<T> + Clone
{
    for i in 1..array.len() {
        array[i] += array[i - 1].clone();
    }
}

#[cfg(test)]
mod test {
    use super::{cumulative_sum, extend_vec_with};

    #[test]
    fn extend_vec_simple() {
        let mut x = vec![1, 1, 1];
        extend_vec_with(&mut x, 3, || 2);
        assert_eq!(x, vec![1, 1, 1, 2]);
    }

    #[test]
    fn cumulative_sum_simple() {
        let mut x: Vec<i64> = vec![1, 0, -1];
        cumulative_sum(&mut x);
        assert_eq!(x, vec![1, 1, 0]);
    }
}
